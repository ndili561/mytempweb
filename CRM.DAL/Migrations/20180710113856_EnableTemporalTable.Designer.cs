// <auto-generated />
using CRM.DAL.Database;
using CRM.DAL.Enum;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CRM.DAL.Migrations
{
    [DbContext(typeof(CRMContext))]
    [Migration("20180710113856_EnableTemporalTable")]
    partial class EnableTemporalTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CRM.DAL.Database.Entities.Common.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DocumentTypeId");

                    b.Property<int?>("EmailId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("RelativePath");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UploadById");

                    b.Property<DateTime>("UploadOn");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("EmailId");

                    b.HasIndex("UploadById");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Common.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("EmailCategoryId");

                    b.Property<int?>("EmailStatusId");

                    b.Property<int?>("RootMessageId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("SendExternal");

                    b.Property<DateTime?>("SendOn");

                    b.Property<int?>("SenderId");

                    b.Property<string>("Subject");

                    b.Property<string>("ToEmailAddress");

                    b.HasKey("Id");

                    b.HasIndex("EmailCategoryId");

                    b.HasIndex("EmailStatusId");

                    b.HasIndex("SenderId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Common.EmailLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EmailId");

                    b.Property<int>("EmailLabelTypeId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("EmailLabelTypeId");

                    b.ToTable("EmailLabels");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Common.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PropertyCode");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Common.PropertyDetailView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<string>("AddressLine3");

                    b.Property<string>("AddressLine4");

                    b.Property<string>("AgeRestriction");

                    b.Property<string>("Area");

                    b.Property<int>("AssetId");

                    b.Property<string>("BathroomType");

                    b.Property<int?>("Bedrooms");

                    b.Property<bool?>("Bin");

                    b.Property<bool?>("CommunalEntrance");

                    b.Property<bool?>("CommunalLaundry");

                    b.Property<bool?>("Concierge");

                    b.Property<string>("CurrentMainTenant");

                    b.Property<bool?>("DoorEntry");

                    b.Property<bool?>("Driveway");

                    b.Property<bool?>("DryerSpace");

                    b.Property<string>("ElectricMeterLocation");

                    b.Property<string>("ElectricMeterType");

                    b.Property<string>("ElectricSupplier");

                    b.Property<int?>("FloorLevel");

                    b.Property<bool?>("Furnished");

                    b.Property<bool?>("Garden");

                    b.Property<DateTime?>("GasLastServicedDate");

                    b.Property<string>("GasMeterLocation");

                    b.Property<string>("GasMeterType");

                    b.Property<string>("GasSupplier");

                    b.Property<bool?>("HighRise");

                    b.Property<string>("Landlord");

                    b.Property<int?>("LatestVoidId");

                    b.Property<decimal?>("Latitude");

                    b.Property<bool?>("Lift");

                    b.Property<decimal?>("Longitude");

                    b.Property<int?>("NeighbourhoodId");

                    b.Property<int?>("NumberOfBathrooms");

                    b.Property<int?>("NumberOfReceptionRooms");

                    b.Property<int?>("NumberOfSteps");

                    b.Property<string>("OtherAdaptations");

                    b.Property<bool?>("Outbuildings");

                    b.Property<bool?>("Parking");

                    b.Property<int?>("PersonId");

                    b.Property<string>("Pets");

                    b.Property<string>("PostCode");

                    b.Property<string>("PropertyCode");

                    b.Property<string>("PropertyType");

                    b.Property<bool?>("RampedAccess");

                    b.Property<decimal?>("Rent");

                    b.Property<string>("RentFrequency");

                    b.Property<bool?>("SeparateWC");

                    b.Property<decimal?>("ServiceCharges");

                    b.Property<bool?>("Stairlift");

                    b.Property<bool?>("StepInShower");

                    b.Property<DateTime?>("TenancyEndDate");

                    b.Property<bool?>("Trustcare");

                    b.Property<string>("WCType");

                    b.Property<bool?>("WalkInShower");

                    b.Property<bool?>("WasherSpace");

                    b.Property<bool?>("WheelchairAdapted");

                    b.HasKey("Id");

                    b.ToTable("PropertyDetailView");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Common.PropertyUserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("ActualCost");

                    b.Property<DateTime?>("ActualEndTime");

                    b.Property<DateTime?>("ActualStartTime");

                    b.Property<string>("Comment");

                    b.Property<string>("Description");

                    b.Property<decimal?>("EstimatedCost");

                    b.Property<string>("LegacyTaskId");

                    b.Property<int>("PropertyId");

                    b.Property<int?>("PropertyVoidId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("ScheduleEndTime");

                    b.Property<DateTime>("ScheduleStartTime");

                    b.Property<int?>("TaskId");

                    b.Property<int>("TaskStatusId");

                    b.Property<int>("TaskTypeId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("PropertyVoidId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("PropertyUserTasks");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Common.PropertyVoid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PropertyId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("VoidId");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyVoids");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Common.PropertyVoidView", b =>
                {
                    b.Property<int?>("VoidId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("ConcurrencyCheck")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("CustomerSignUpDate");

                    b.Property<DateTime?>("CustomerSignUpIBSTenancyStartDate");

                    b.Property<string>("CustomerSignUpTenancyType");

                    b.Property<int?>("CustomerSignupTaskId");

                    b.Property<int?>("CustomerViewingTaskId");

                    b.Property<bool?>("FinalCleanAndCheckComplete");

                    b.Property<bool?>("FinalInspectionComplete");

                    b.Property<bool?>("HasCustomerSignedTenancyAgreement");

                    b.Property<DateTime?>("HoldReleaseDate");

                    b.Property<DateTime?>("IBSTenancyEndDate");

                    b.Property<DateTime?>("IBSTenancyStartDate");

                    b.Property<bool?>("IsReadyForMatching");

                    b.Property<bool?>("IsReadyForPropertyShop");

                    b.Property<string>("LastModifiedById");

                    b.Property<string>("NHOUserId");

                    b.Property<string>("NewTenancyRef");

                    b.Property<bool?>("PlannedOnDemandHandoverComplete");

                    b.Property<string>("PropertyCode");

                    b.Property<int?>("PropertyHandoverTaskId");

                    b.Property<int?>("PropertyInspectionTaskId");

                    b.Property<int?>("PropertyMatchTaskId");

                    b.Property<int?>("SecurityStatusId");

                    b.Property<bool?>("SendToPropertyShop");

                    b.Property<string>("SignedTerminationReason");

                    b.Property<Guid?>("SiteManagerUserId");

                    b.Property<int?>("StarterTenancyID");

                    b.Property<int?>("TenancyEndTaskId");

                    b.Property<string>("TenancyRef");

                    b.Property<string>("TenancyStatus");

                    b.Property<string>("TenancyType");

                    b.Property<int?>("TerminationTaskId");

                    b.Property<int?>("VoidStatusId");

                    b.HasKey("VoidId");

                    b.ToTable("PropertyVoidView");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Common.Sms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Message");

                    b.Property<string>("ReceiverNumber");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SenderId");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Smses");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine1");

                    b.Property<string>("AddressLine2");

                    b.Property<string>("AddressLine3");

                    b.Property<string>("AddressLine4");

                    b.Property<bool>("IsActive");

                    b.Property<string>("PostCode");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("AddressTypes");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.MergePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CorrectPersonId");

                    b.Property<int>("DuplicatePersonId");

                    b.Property<bool>("IsMerged");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CorrectPersonId");

                    b.ToTable("MergePersons");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ApplicantTypeId");

                    b.Property<int?>("ApplicationId");

                    b.Property<int?>("ContactTypeId");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<int?>("EthnicityId");

                    b.Property<string>("Forename")
                        .HasMaxLength(250);

                    b.Property<int?>("GenderId");

                    b.Property<Guid?>("GlobalIdentityKey");

                    b.Property<bool?>("HasDuplicate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsDuplicate");

                    b.Property<int?>("MainContactPersonId");

                    b.Property<string>("NationalInsuranceNumber");

                    b.Property<int?>("NationalityTypeId");

                    b.Property<string>("PreferredContactTime");

                    b.Property<int?>("PreferredLanguageId");

                    b.Property<int?>("RelationshipId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Surname")
                        .HasMaxLength(100);

                    b.Property<string>("TenantCode")
                        .HasMaxLength(50);

                    b.Property<int?>("TenantId");

                    b.Property<int?>("TitleId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantTypeId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("EthnicityId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MainContactPersonId");

                    b.HasIndex("NationalityTypeId");

                    b.HasIndex("PreferredLanguageId");

                    b.HasIndex("RelationshipId");

                    b.HasIndex("TenantId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressId");

                    b.Property<int>("AddressTypeId");

                    b.Property<DateTime?>("LivingSince");

                    b.Property<DateTime?>("LivingTill");

                    b.Property<int>("PersonId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAddresses");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AlertGroupId");

                    b.Property<int?>("AlertStatusId");

                    b.Property<int?>("AlertTypeId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Details");

                    b.Property<int>("PersonId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("AlertGroupId");

                    b.HasIndex("AlertStatusId");

                    b.HasIndex("AlertTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAlerts");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonAlertComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Notes");

                    b.Property<int>("PersonAlertId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("PersonAlertId");

                    b.ToTable("PersonAlertComments");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonAntiSocialBehaviour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CaseClosureReasonId");

                    b.Property<int?>("CaseStatusId");

                    b.Property<int?>("CaseTypeId");

                    b.Property<DateTime?>("CompletionDate");

                    b.Property<string>("IBSCaseReference");

                    b.Property<DateTime>("LoggedDate");

                    b.Property<int?>("PersonId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CaseClosureReasonId");

                    b.HasIndex("CaseStatusId");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("UserId");

                    b.ToTable("PersonAntiSocialBehaviours");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonAntiSocialBehaviourCaseNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActionDateTime");

                    b.Property<string>("Note");

                    b.Property<int>("PersonAntiSocialBehaviourId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("PersonAntiSocialBehaviourId");

                    b.ToTable("PersonAntiSocialBehaviourCaseNotes");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonApplicationLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplicationId");

                    b.Property<string>("ExternalLinkId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("PersonId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonApplicationLinks");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CaseStatusId");

                    b.Property<int?>("CaseTypeId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Details");

                    b.Property<int>("PersonId");

                    b.Property<int?>("PriorityId");

                    b.Property<DateTime>("RaisedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CaseStatusId");

                    b.HasIndex("CaseTypeId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("UserId");

                    b.ToTable("PersonCases");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<int>("ContactByOptionId");

                    b.Property<string>("ContactValue");

                    b.Property<bool?>("IsDefault");

                    b.Property<int>("PersonId");

                    b.Property<int?>("PriorityOrder");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ContactByOptionId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonContactDetails");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DocumentId");

                    b.Property<bool>("IsAntiSocialBehaviour");

                    b.Property<int>("PersonId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonDocuments");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<int>("EmailId");

                    b.Property<int?>("EmailStatusId");

                    b.Property<bool>("IsBcc");

                    b.Property<bool>("IsCc");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsImportant");

                    b.Property<int?>("PersonId");

                    b.Property<DateTime?>("ReadOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("EmailStatusId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonEmails");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonFlag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Details");

                    b.Property<int?>("FlagGroupId");

                    b.Property<int?>("FlagTypeId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("PersonId");

                    b.Property<DateTime>("RaisedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("FlagGroupId");

                    b.HasIndex("FlagTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonFlags");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonFlagComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Notes");

                    b.Property<int>("PersonFlagId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("PersonFlagId");

                    b.ToTable("PersonFlagComments");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonSms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<int?>("PersonId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("SendOn");

                    b.Property<int>("SmsId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SmsId");

                    b.ToTable("PersonSmses");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PropertyDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DocumentId");

                    b.Property<int?>("ImageGroupId");

                    b.Property<bool>("IsDefaultImage");

                    b.Property<bool>("IsImageForPropertyShop");

                    b.Property<int>("PropertyId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("ViewOrder");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ImageGroupId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyDocuments");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PersonId");

                    b.Property<int>("PropertyId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TenancyReference")
                        .HasMaxLength(50);

                    b.Property<string>("TenancyType")
                        .HasMaxLength(50);

                    b.Property<string>("TenantCode")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.TenantHistoryView", b =>
                {
                    b.Property<string>("TenantCode");

                    b.Property<string>("TenancyPersonReference");

                    b.Property<string>("IsMainTenant");

                    b.Property<int?>("Age");

                    b.Property<decimal?>("CurrentBalance");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Ehhnicity");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("IsJointTenant");

                    b.Property<string>("LastName");

                    b.Property<string>("MobileNumber");

                    b.Property<DateTime?>("PersonEndDate");

                    b.Property<DateTime?>("PersonStartDate");

                    b.Property<string>("PropertyCode");

                    b.Property<string>("RentGroup");

                    b.Property<string>("RentGroupDescription");

                    b.Property<string>("TelephoneNumber");

                    b.Property<DateTime?>("TenancyEndDate");

                    b.Property<string>("TenancyReference");

                    b.Property<DateTime?>("TenancyStartDate");

                    b.Property<string>("TenancyStatus");

                    b.Property<string>("TenancyType");

                    b.Property<string>("Title");

                    b.HasKey("TenantCode", "TenancyPersonReference", "IsMainTenant");

                    b.ToTable("TenantHistoryView");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplicationId");

                    b.Property<string>("Comment");

                    b.Property<int>("RoleId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationRoles");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.ApplicationTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplicationId");

                    b.Property<string>("Comment");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TaskId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("TaskId");

                    b.ToTable("ApplicationTasks");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ApplicationAccessLevel");

                    b.Property<int>("ApplicationId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("KeyValues");

                    b.Property<string>("NewValues");

                    b.Property<string>("OldValues");

                    b.Property<string>("TableName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Audits");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GuestId");

                    b.Property<int>("HostId");

                    b.Property<string>("Message");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("GuestId");

                    b.HasIndex("HostId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.IdentityUserView", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int?>("PersonId");

                    b.Property<string>("Roles");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("IdentityUserView");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplicationId");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("NextReminderDate");

                    b.Property<int?>("ParentMessageId");

                    b.Property<int>("RaisedById");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("SendEmail");

                    b.Property<bool>("SendSms");

                    b.Property<string>("Subject");

                    b.Property<int?>("UserGroupId");

                    b.HasKey("Id");

                    b.HasIndex("ParentMessageId");

                    b.HasIndex("RaisedById");

                    b.HasIndex("UserGroupId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessLevel");

                    b.Property<int>("ApplicationRoleId");

                    b.Property<int>("MenuItemId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAdministrator");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TaskCss");

                    b.Property<int>("TaskDuration");

                    b.Property<string>("TaskStyle");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("EmployeeRef");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSysAdmin");

                    b.Property<int?>("ManagerId");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int?>("PersonId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Subject");

                    b.Property<string>("Telephone");

                    b.Property<int?>("UserGroupId");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<int?>("PersonId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ApplicationRoleId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserApplicationRoles");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserDiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Description");

                    b.Property<int?>("PersonId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDiaries");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<int>("DocumentId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDocuments");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<int>("EmailId");

                    b.Property<int?>("EmailStatusId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsImportant");

                    b.Property<DateTime?>("ReadOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("EmailStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEmails");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsRead");

                    b.Property<DateTime?>("NextReminderDate");

                    b.Property<int>("RecipientId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("SendSms");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.ToTable("UseMessages");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserPersonTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("ActualCost");

                    b.Property<DateTime?>("ActualEndTime");

                    b.Property<DateTime?>("ActualStartTime");

                    b.Property<string>("Comment");

                    b.Property<string>("Description");

                    b.Property<decimal?>("EstimatedCost");

                    b.Property<string>("LegacyTaskId");

                    b.Property<int?>("PersonId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("ScheduleEndTime");

                    b.Property<DateTime>("ScheduleStartTime");

                    b.Property<int?>("TaskId");

                    b.Property<int>("TaskStatusId");

                    b.Property<int>("TaskTypeId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPersonTasks");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserSms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("SendOn");

                    b.Property<int>("SmsId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SmsId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSmses");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserTaskNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("NotificationSent");

                    b.Property<DateTime?>("NotificationSentOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TaskNotifyTypeId");

                    b.Property<int?>("UserPersonTaskId");

                    b.Property<int>("UserTaskId");

                    b.HasKey("Id");

                    b.HasIndex("TaskNotifyTypeId");

                    b.HasIndex("UserPersonTaskId");

                    b.ToTable("UserTaskNotifications");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserTaskReminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("NextReminderDue");

                    b.Property<bool>("ReminderSent");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TaskReminderTypeId");

                    b.Property<int>("UserPersonTaskId");

                    b.HasKey("Id");

                    b.HasIndex("TaskReminderTypeId");

                    b.HasIndex("UserPersonTaskId");

                    b.ToTable("UserTaskReminders");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.WebApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.AlertGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("AlertGroups");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.AlertStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("AlertStatuses");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.AlertType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("AlertTypes");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.AntiSocialBehaviourCaseClosureReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsResolvedReason");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("AntiSocialBehaviourCaseClosureReasons");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.AntiSocialBehaviourCaseStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("AntiSocialBehaviourCaseStatuses");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.AntiSocialBehaviourType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("AntiSocialBehaviourTypes");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.ApplicantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("ApplicantTypes");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.ContactByOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("ContactByOptions");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.EmailCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<string>("CssClass")
                        .HasMaxLength(20);

                    b.Property<string>("CssStyle")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("EmailCategories");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.EmailLabelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<string>("CssClass")
                        .HasMaxLength(20);

                    b.Property<string>("CssStyle")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("EmailLabelTypes");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.EmailStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<string>("CssClass")
                        .HasMaxLength(20);

                    b.Property<string>("CssStyle")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("EmailStatuses");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.Ethnicity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<int>("IbsCode");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("Ethnicities");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.FlagGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("FlagGroups");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.FlagType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("FlagTypes");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.ImageGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("ImageGroups");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Lookups");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.NationalityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("NationalityTypes");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.PersonCaseStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("PersonCaseStatuses");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.PersonCaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("PersonCaseTypes");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("Priorities");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.TaskNotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<string>("CssClass")
                        .HasMaxLength(20);

                    b.Property<string>("CssStyle")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("TaskNotifyTypes");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.TaskReminderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<string>("CssClass")
                        .HasMaxLength(20);

                    b.Property<string>("CssStyle")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("TaskReminderTypes");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.TaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<string>("CssClass")
                        .HasMaxLength(20);

                    b.Property<string>("CssStyle")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("TaskStatuses");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<string>("CssClass")
                        .HasMaxLength(20);

                    b.Property<string>("CssStyle")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<int?>("DefaultGenderId");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("LookupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("DefaultGenderId");

                    b.HasIndex("LookupId");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Common.Document", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId");

                    b.HasOne("CRM.DAL.Database.Entities.Common.Email", "Email")
                        .WithMany("Attachments")
                        .HasForeignKey("EmailId");

                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "UploadBy")
                        .WithMany()
                        .HasForeignKey("UploadById")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Common.Email", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.EmailCategory", "EmailCategory")
                        .WithMany()
                        .HasForeignKey("EmailCategoryId");

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.EmailStatus", "EmailStatus")
                        .WithMany()
                        .HasForeignKey("EmailStatusId");

                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Common.EmailLabel", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Common.Email", "Email")
                        .WithMany("EmailLabels")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.EmailLabelType", "EmailLabelType")
                        .WithMany()
                        .HasForeignKey("EmailLabelTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Common.PropertyUserTask", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Common.Property", "Property")
                        .WithMany("PropertyUserTasks")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Common.PropertyVoid", "PropertyVoid")
                        .WithMany()
                        .HasForeignKey("PropertyVoidId");

                    b.HasOne("CRM.DAL.Database.Entities.Employee.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.TaskStatus", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Common.PropertyVoid", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Common.Property", "Property")
                        .WithMany("PropertyVoids")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Common.Sms", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.AddressType", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany()
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.MergePerson", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Customer.Person", "CorrectPerson")
                        .WithMany("MergePersons")
                        .HasForeignKey("CorrectPersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.Person", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.ApplicantType", "ApplicantType")
                        .WithMany()
                        .HasForeignKey("ApplicantTypeId");

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId");

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Ethnicity", "Ethnicity")
                        .WithMany()
                        .HasForeignKey("EthnicityId");

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("CRM.DAL.Database.Entities.Customer.Person", "MainContactPerson")
                        .WithMany()
                        .HasForeignKey("MainContactPersonId");

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.NationalityType", "NationalityType")
                        .WithMany()
                        .HasForeignKey("NationalityTypeId");

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Language", "PreferredLanguage")
                        .WithMany()
                        .HasForeignKey("PreferredLanguageId");

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Relationship", "Relationship")
                        .WithMany()
                        .HasForeignKey("RelationshipId");

                    b.HasOne("CRM.DAL.Database.Entities.Customer.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonAddress", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Customer.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Customer.AddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Customer.Person", "Person")
                        .WithMany("PersonAddresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonAlert", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.AlertGroup", "AlertGroup")
                        .WithMany()
                        .HasForeignKey("AlertGroupId");

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.AlertStatus", "AlertStatus")
                        .WithMany()
                        .HasForeignKey("AlertStatusId");

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.AlertType", "AlertType")
                        .WithMany()
                        .HasForeignKey("AlertTypeId");

                    b.HasOne("CRM.DAL.Database.Entities.Customer.Person", "Person")
                        .WithMany("PersonAlerts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonAlertComment", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Customer.PersonAlert", "PersonAlert")
                        .WithMany("PersonAlertComments")
                        .HasForeignKey("PersonAlertId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonAntiSocialBehaviour", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.AntiSocialBehaviourCaseClosureReason", "CaseClosureReason")
                        .WithMany()
                        .HasForeignKey("CaseClosureReasonId");

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.AntiSocialBehaviourCaseStatus", "CaseStatus")
                        .WithMany()
                        .HasForeignKey("CaseStatusId");

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.AntiSocialBehaviourType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId");

                    b.HasOne("CRM.DAL.Database.Entities.Customer.Person", "Person")
                        .WithMany("PersonAntiSocialBehaviours")
                        .HasForeignKey("PersonId");

                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonAntiSocialBehaviourCaseNote", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Customer.PersonAntiSocialBehaviour", "PersonAntiSocialBehaviour")
                        .WithMany("PersonAntiSocialBehaviourCaseNotes")
                        .HasForeignKey("PersonAntiSocialBehaviourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonApplicationLink", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Employee.WebApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Customer.Person", "Person")
                        .WithMany("Applications")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonCase", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.PersonCaseStatus", "CaseStatus")
                        .WithMany()
                        .HasForeignKey("CaseStatusId");

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.PersonCaseType", "CaseType")
                        .WithMany()
                        .HasForeignKey("CaseTypeId");

                    b.HasOne("CRM.DAL.Database.Entities.Customer.Person", "Person")
                        .WithMany("PersonCases")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId");

                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonContactDetail", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.ContactByOption", "ContactByOption")
                        .WithMany()
                        .HasForeignKey("ContactByOptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Customer.Person", "Person")
                        .WithMany("PersonContactDetails")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonDocument", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Common.Document", "Document")
                        .WithMany("PersonDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Customer.Person", "Person")
                        .WithMany("Documents")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonEmail", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Common.Email", "Email")
                        .WithMany("PersonEmails")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.EmailStatus", "EmailStatus")
                        .WithMany()
                        .HasForeignKey("EmailStatusId");

                    b.HasOne("CRM.DAL.Database.Entities.Customer.Person", "Person")
                        .WithMany("Emails")
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonFlag", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.FlagGroup", "FlagGroup")
                        .WithMany()
                        .HasForeignKey("FlagGroupId");

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.FlagType", "FlagType")
                        .WithMany()
                        .HasForeignKey("FlagTypeId");

                    b.HasOne("CRM.DAL.Database.Entities.Customer.Person", "Person")
                        .WithMany("PersonFlags")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonFlagComment", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Customer.PersonFlag", "PersonFlag")
                        .WithMany("PersonFlagComments")
                        .HasForeignKey("PersonFlagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PersonSms", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Customer.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("CRM.DAL.Database.Entities.Common.Sms", "Sms")
                        .WithMany("PersonSmses")
                        .HasForeignKey("SmsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.PropertyDocument", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Common.Document", "Document")
                        .WithMany("PropertyDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.ImageGroup", "ImageGroup")
                        .WithMany()
                        .HasForeignKey("ImageGroupId");

                    b.HasOne("CRM.DAL.Database.Entities.Common.Property", "Property")
                        .WithMany("PropertyDocuments")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Customer.Tenant", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Customer.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Common.Property", "Property")
                        .WithMany("Tenants")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.ApplicationRole", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Employee.WebApplication", "Application")
                        .WithMany("ApplicationRoles")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Employee.Role", "Role")
                        .WithMany("ApplicationRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.ApplicationTask", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Employee.WebApplication", "Application")
                        .WithMany("ApplicationTasks")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Employee.Task", "Task")
                        .WithMany("ApplicationTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.ApplicationUser", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Employee.WebApplication", "Application")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.Audit", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.ChatMessage", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "Host")
                        .WithMany()
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.MenuItem", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Employee.WebApplication", "Application")
                        .WithMany("MenuItems")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.Message", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Employee.Message", "ParentMessage")
                        .WithMany()
                        .HasForeignKey("ParentMessageId");

                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "RaisedBy")
                        .WithMany()
                        .HasForeignKey("RaisedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Employee.UserGroup", "UserGroup")
                        .WithMany("Messages")
                        .HasForeignKey("UserGroupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.Permission", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Employee.ApplicationRole", "ApplicationRole")
                        .WithMany("RolePermissions")
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Employee.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.User", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("CRM.DAL.Database.Entities.Employee.UserGroup", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserActivity", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Customer.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserApplicationRole", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Employee.ApplicationRole", "Role")
                        .WithMany()
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserDiary", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Customer.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "User")
                        .WithMany("Diaries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserDocument", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Common.Document", "Document")
                        .WithMany("UserDocuments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserEmail", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Common.Email", "Email")
                        .WithMany("UserEmails")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.EmailStatus", "EmailStatus")
                        .WithMany()
                        .HasForeignKey("EmailStatusId");

                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserMessage", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "Recipient")
                        .WithMany("Messages")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserPersonTask", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Customer.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("CRM.DAL.Database.Entities.Employee.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.TaskStatus", "TaskStatus")
                        .WithMany()
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserSms", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Common.Sms", "Sms")
                        .WithMany("UserSmses")
                        .HasForeignKey("SmsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Employee.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserTaskNotification", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.TaskNotificationType", "TaskNotifyType")
                        .WithMany()
                        .HasForeignKey("TaskNotifyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Employee.UserPersonTask", "UserPersonTask")
                        .WithMany()
                        .HasForeignKey("UserPersonTaskId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Employee.UserTaskReminder", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.TaskReminderType", "TaskReminderType")
                        .WithMany()
                        .HasForeignKey("TaskReminderTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRM.DAL.Database.Entities.Employee.UserPersonTask", "UserPersonTask")
                        .WithMany()
                        .HasForeignKey("UserPersonTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.AlertGroup", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("AlertGroups")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.AlertStatus", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("AlertStatuses")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.AlertType", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("AlertTypes")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.AntiSocialBehaviourCaseClosureReason", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("AntiSocialBehaviourCaseClosureReasons")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.AntiSocialBehaviourCaseStatus", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("AntiSocialBehaviourCaseStatuses")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.AntiSocialBehaviourType", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("AntiSocialBehaviourTypes")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.ApplicantType", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("ApplicantTypes")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.ContactByOption", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("ContactByOptions")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.ContactType", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("ContactTypes")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.DocumentType", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("DocumentTypes")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.EmailCategory", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("EmailCategories")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.EmailLabelType", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("EmailLabelTypes")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.EmailStatus", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("EmailStatuses")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.Ethnicity", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("Ethnicities")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.FlagGroup", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("FlagGroups")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.FlagType", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("FlagTypes")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.Gender", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("Genders")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.ImageGroup", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("ImageGroups")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.Language", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("Languages")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.NationalityType", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("Nationalities")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.PersonCaseStatus", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("PersonCaseStatuses")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.PersonCaseType", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("PersonCaseTypes")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.Priority", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("Priorities")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.Relationship", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("Relationships")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.TaskNotificationType", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("TaskNotificationTypes")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.TaskReminderType", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("TaskReminderTypes")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.TaskStatus", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany()
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.TaskType", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("TaskTypes")
                        .HasForeignKey("LookupId");
                });

            modelBuilder.Entity("CRM.DAL.Database.Entities.Lookup.Title", b =>
                {
                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("DefaultGenderId");

                    b.HasOne("CRM.DAL.Database.Entities.Lookup.Lookup", "Lookup")
                        .WithMany("Titles")
                        .HasForeignKey("LookupId");
                });
#pragma warning restore 612, 618
        }
    }
}
